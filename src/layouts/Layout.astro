---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="A beautiful blog about flowers" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-200">
		<nav class="border-b border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-800 sticky top-0 z-50">
			<div class="container mx-auto px-4 py-4 flex justify-between items-center">
				<a href="/" class="text-2xl font-bold text-primary-600 dark:text-primary-400">Blooming Beauty</a>
				<button id="theme-toggle" class="p-2 rounded-lg bg-gray-100 dark:bg-gray-700">
					<svg class="w-6 h-6 dark:hidden" fill="currentColor" viewBox="0 0 20 20">
						<path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
					</svg>
					<svg class="w-6 h-6 hidden dark:block" fill="currentColor" viewBox="0 0 20 20">
						<path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"></path>
					</svg>
				</button>
			</div>
		</nav>
		<slot />
		<footer class="bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-800 mt-12">
			<div class="container mx-auto px-4 py-8 text-center text-gray-600 dark:text-gray-400">
				Â© {new Date().getFullYear()} Blooming Beauty. All rights reserved.
			</div>
		</footer>
	</body>
</html>

<script>
	const theme = (() => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
			return 'dark';
		}
		return 'light';
	})();

	if (theme === 'light') {
		document.documentElement.classList.remove('dark');
	} else {
		document.documentElement.classList.add('dark');
	}

	window.localStorage.setItem('theme', theme);

	document.getElementById('theme-toggle')?.addEventListener('click', () => {
		const element = document.documentElement;
		element.classList.toggle('dark');

		const isDark = element.classList.contains('dark');
		localStorage.setItem('theme', isDark ? 'dark' : 'light');
	});
</script>

<style is:global>
	:root {
		--swiper-theme-color: theme(colors.primary.500);
	}
	html {
		scroll-behavior: smooth;
	}
</style>